# the original ranges are represented as the rowRanges of the RaggedExperiment
rowRanges(ragexp)
# sparseAssay
# return a matrix with the number of rows equal to the total number of ranges defined across all samples
sparseAssay(ragexp)
unlist(grl)
# compactAssay
# the dimensions of the compactAssay result differ from that of the sparseAssay result only if there are identical ranges
# in different samples.
compactAssay(ragexp)
compactAssay(ragexp),"type"
compactAssay(ragexp,"type")
# disjointAssay
disjoinAssay(ragexp, simplifyDisjoin = mean)
# qreduceAssay
# It requires you to provide a query argument that is a GRanges vector, and the rows of the resulting matrix correspond
# to the elements of this GRanges.
weightedmean <- function(scores, ranges, qranges)
{
isects <- pintersect(ranges, qranges)
sum(scores * width(isects)) / sum(width(isects))
}
install.packages("UpSetR")
grl
(query <- GRanges(c("chr1:1-14:-", "chr1:15-18:+"))
(query <- GRanges(c("chr1:1-14:-", "chr1:15-18:+")))
)
(query <- GRanges(c("chr1:1-14:-", "chr1:15-18:+")))
qreduceAssay(raagexp, query, simplifyReduce = weightedmean)
qreduceAssay(ragexp, query, simplifyReduce = weightedmean)
## Working with MultiAssayExperiment
# The MultiAssayExperiment miniACC demo object
data("miniACC")
miniACC
# colData - information biological units
# This slot is a DataFrame describing the characteristics of biological units.
colData(miniACC)[1:4,1:4]
table(miniACC$race)
# ExperimentList - experiment data
experiments(miniACC)
# sampleMap - relationship graph
# a graph representation of the relationship between biological units and experimental results
sampleMap(miniACC)
# metadata
# metadata can be used to keep additional information about patients, assays performed on individuals or on the entire
# cohort, or features such as genes, proteins, and genomic ranges
metadata(miniACC)
# MultiAssayExperiment Subsetting
# single bracket
miniACC[c("MAPK14", "IGFBP2"), , ]
miniACC[, miniACC$pathologic_stage == "stage iv"]
miniACC[, , "RNASeq2GeneNorm"]
# Subsetting by genomic ranges
# Double bracket [[
# "[[" is a convenience function for extracting a single element of the MultiAssayExperiment ExperimentList
miniACC[[1L]]
# Compleye cases
# complete.cases() shows which patients have complete data for all assays
summary(complete.cases(miniACC))
# intersectColumns() will select complete cases and rearrange each ExperimentList element so its columns correspond exactly to rows
# of colData in the same order
accmatched = intersectColumns(miniACC)
colnames(accmatched)
# row names that are common across assays
# intersectRows() keeps only rows that are common to each assay, and aligns them in identical order
accmatched2 <- intersectRows(miniACC[, , c("RNASeq2GeneNorm", "gistict", "Mutations")])
rownames(accmatched2)
# Extraction
# assay and assays
# assay method will extract the first element of the ExperimentList and will return a matrix
assay(miniACC)
class(assay(miniACC))
# assays method will return a SimpleList of the data with each element being a matrix
assays(miniACC)
# Transformation/ reshaping
# longFormat
longFormat(miniACC[c("TP53","CTNNB1"), , ],
colDataCols = c("vital_status", "days_to_death"))
# wideFormat
# in wide format, each feature from each assay goes in a separate column, with one row per primary identifier (patient)
wideFormat(miniACC[c("TP35", "CTNNB1"), , ],
colDataCols = c("vital_status", "days_to_death"))
MultiAssayExperiment(experiments = experiments(miniACC),
colData = colData(miniACC),
sampleMap = sampleMap(miniACC),
metadata = metadata(miniACC))
# c- concatenate to MultiAssayExperiment
# c function allows the user to concatenate an additional experiment to an existing MultiAssayExperiment
miniACC2 <- c(miniACC, log2rnaseq = log2(assaya(miniACC) $ RNASeq2GeneNorm), mapFrom=1L) # the mapFrom argument allows the user to
# c- concatenate to MultiAssayExperiment
# c function allows the user to concatenate an additional experiment to an existing MultiAssayExperiment
miniACC2 <- c(miniACC, log2rnaseq = log2(assay(miniACC) $ RNASeq2GeneNorm), mapFrom=1L) # the mapFrom argument allows the user to
# c- concatenate to MultiAssayExperiment
# c function allows the user to concatenate an additional experiment to an existing MultiAssayExperiment
miniACC2 <- c(miniACC, log2rnaseq = log2(assays(miniACC) $ RNASeq2GeneNorm), mapFrom=1L) # the mapFrom argument allows the user to
# map from a particular experiment provided
# that the order of the colnames is in the same
experiments(miniACC2)
# The Cancer Genome Atlas (TCGA) as MultiAssayExperiment objects
library(curatedTCGAData)
curatedTCGAData("ACC")
acc <- curatedTCGAData("ACC",
assays = c("miRNASeqGene", "RPPAArray", "Mutation", "RNASeq2GeneNorm", "CNVSNP"),
dry.run = FALSE)
suppressMessages({
acc <- curatedTCGAData("ACC",
assays = c("miRNASeqGene", "RPPAArray", "Mutation", "RNASeq2GeneNorm", "CNVSNP"),
dry.run = FALSE)
})
dim(colData(acc))
tail(colnames(colData(acc)), 10)
# Utilities for TCGA
# simplifyTCGA function creates a more manageable MultiAssayExperiment object and using RangedSummarizedExperiment assays where possible
(simpa <- TCGAutils::simplifyTCGA(acc))
# sample types in the data
# sampleTables function gives you an overview of samples in each assay
sampleTables(acc)
library(curatedTCGAData)
curatedTCGAData("ACC")
suppressMessages({
acc <- curatedTCGAData("ACC",
assays = c("miRNASeqGene", "RPPAArray", "Mutation", "RNASeq2GeneNorm", "CNVSNP"),
dry.run = FALSE)
})
dim(colData(acc))
tail(colnames(colData(acc)), 10)
# Utilities for TCGA
# simplifyTCGA function creates a more manageable MultiAssayExperiment object and using RangedSummarizedExperiment assays where possible
(simpa <- TCGAutils::simplifyTCGA(acc))
# sample types in the data
# sampleTables function gives you an overview of samples in each assay
sampleTables(acc)
# Utilities for TCGA
library(TCGAutils)
# simplifyTCGA function creates a more manageable MultiAssayExperiment object and using RangedSummarizedExperiment assays where possible
(simpa <- TCGAutils::simplifyTCGA(acc))
# sample types in the data
# sampleTables function gives you an overview of samples in each assay
sampleTables(acc)
head(sampleTypes)
# Curated molecular subtypes
getSubtypeMap(acc)
head(colData(acc)$History)
head(colData(acc)$Histology)
# Plotting, correlation, and other analyses
upsetSamples(miniACC)
# Kaplan-meier plot stratified by pathology_N_stage
# the colData provides clinical data for things like a Kaplan-Meier plot for overall survival stratified by nodal stage
Surv(miniACC$days_to_death, miniACC$vital_status)
# remove any patients missing overall survival information
miniACCsurv <- miniACC[, complete.cases(miniACC$days_to_death, miniACC$vital_status)]
fit <- survfit(Surv(days_to_death, vital_status) ~ pathology_N_stage, data = colData(miniACCsurv))
ggsurvevents(fit, data = colData(miniACCsurv), risk.table = TRUE)
ggsurveplot(fit, data = colData(miniACCsurv), risk.table = TRUE)
ggsurvplot(fit, data = colData(miniACCsurv), risk.table = TRUE)
# Multivariate Cox regression including RNA-seq, copy number, and pathology
# choose the EZH2 gene for demonstration
wideacc = wideFormat(miniACC["EZH2", , ],
colDataCols = c("vital_status", "days_to_death", "pathology_N_stage"))
wideacc$y = Surv(wideacc$days_to_death, wideacc$vital_status)
head(wideacc)
# perform a multivariate Cox regression with EZH2 copy number (gistict), log2-transformed EZH2 expression (RNASeq2GeneNorm), and nodal
# status (pathology_N_stage) as predictors
coxph(Surv(days_to_death, vital_status) ~ gistict_EZH2 + log2(RNASeq2GeneNorm_EZH2) + pathology_N_stage,
data=wideacc)
# narrow down miniACC to only the assays needed
subacc <- miniACC[, , c("RNASeq2GeneNorm", "gistict")]
# Align the rows and columns, keeping only samples with both assays available
subacc <- intersectColumns(subacc)
subacc <- intersectRows(subacc)
subacc.list <- assays(subacc)
subacc.list[[1]] <- log2(subacc.list[[1]] + 1 )
subacc.list <- lapply(subacc.list, t)
corres <- cor(subacc.list[[1]], subacc.list[[2]])
hist(diag(corres))
hist(corres[upper.tri(corres)])
## for the gene with highest correlation to copy number, make a box plot of log2 expression against copy number
which.max(diag(corres))
df <- wideFormat(subacc["EIF4E", , ])
head(df)
boxplot(RNASeq2GeneNorm_EIF4E ~ gistict_EIF4E,
data = df, varwidth = TRUE,
xlab = "GISTIC Relative Copy Number Call",
ylab = "RNA-seq counts")
## Identifying correlated principal components
# Performing PCA of each of the five assays, using samples available on each assay, log-transforming RNA-seq data first.
# Using the first 10 components, calculate Pearson correlaiton between all scores and plot these correlations as a heatmap to identify
# correlated components across assays.
getLoadings <- function(x, ncomp=10, dolog=FALSE, center=TRUE, scale.=TRUE){
if(dolog){
x <- log2(x + 1)
}
pc = prcomp(x, center=center, scale.=scale.)
return(t(pc$rotation[, 1:10]))
}
miniACC2 <- intersectColumns(miniACC)
miniACC2 <- c(miniACC2, rnaseqPCA=getLoadings(assays(miniACC2)[[1]], dolog=TRUE), mapFrom=1L)
miniACC2 <- c(miniACC2, gistictPCA=getLoadings(assays(miniACC2)[[2]], center=FALSE, scale.=FALSE), mapFrom=2L)
miniACC2 <- c(miniACC2, proteinPCA=getLoadings(assays(miniACC2)[[3]]), mapFrom=3L)
miniACC2 <- c(miniACC2, mutationsPCA=getLoadings(assays(miniACC2)[[4]], center=FALSE, scale.=FALSE), mapFrom=4L)
miniACC2 <- c(miniACC2, miRNAPCA=getLoadings(assays(miniACC2)[[5]]), mapFrom=5L)
miniACC2 <- miniACC2[, , 6:10]
experiments(miniACC2)
BiocManager::install("RCy3")
libraray(RCy3)
library(RCy3)
cytoscapePing()
installation_responses <- c()
cyto_app_toinstall <- c("clustermaker2", "enrichmentmap", "autoannotate", "wordcloud", "stringapp", "aMatReader")
cytoscape_version <- unlist(strsplit( cytoscapeVersionInfo()['cytoscapeVersion'],split = "\\."))
cytoscapePing()
cytoscape_version <- unlist(strsplit( cytoscapeVersionInfo()['cytoscapeVersion'],split = "\\."))
if(length(cytoscape_version) == 3 && as.numeric(cytoscape_version[1]>=3)
&& as.numeric(cytoscape_version[2]>=7)){
for(i in 1:length(cyto_app_toinstall)){
#check to see if the app is installed.  Only install it if it hasn't been installed
if(!grep(commandsGET(paste("apps status app=\"", cyto_app_toinstall[i],"\"", sep="")),
pattern = "status: Installed")){
installation_response <-commandsGET(paste("apps install app=\"",
cyto_app_toinstall[i],"\"", sep=""))
installation_responses <- c(installation_responses,installation_response)
} else{
installation_responses <- c(installation_responses,"already installed")
}
}
installation_summary <- data.frame(name = cyto_app_toinstall,
status = installation_responses)
knitr::kable(list(installation_summary),
booktabs = TRUE, caption = 'A Summary of automated app installation'
)
}
cytoscapePing()
cytoscapeVersionInfo()
help(package = RCy3)
cyto_app_toinstall <- c("clustermaker2", "enrichmentmap", "autoannotate", "wordcloud", "stringapp", "aMatReader")
cytoscape_version <- unlist(strsplit( cytoscapeVersionInfo()['cytoscapeVersion'],split = "\\."))
if(length(cytoscape_version) == 3 && as.numeric(cytoscape_version[1]>=3)
&& as.numeric(cytoscape_version[2]>=7)){
for(i in 1:length(cyto_app_toinstall)){
#check to see if the app is installed.  Only install it if it hasn't been installed
if(!grep(commandsGET(paste("apps status app=\"", cyto_app_toinstall[i],"\"", sep="")),
pattern = "status: Installed")){
installation_response <-commandsGET(paste("apps install app=\"",
cyto_app_toinstall[i],"\"", sep=""))
installation_responses <- c(installation_responses,installation_response)
} else{
installation_responses <- c(installation_responses,"already installed")
}
}
installation_summary <- data.frame(name = cyto_app_toinstall,
status = installation_responses)
knitr::kable(list(installation_summary),
booktabs = TRUE, caption = 'A Summary of automated app installation'
)
}
# Make sure that Cytoscape is open
cytoscapePing()
cytoscapeVersionInfo()
library(RCy3)
installation_responses <- c()
cyto_app_toinstall <- c("clustermaker2", "enrichmentmap", "autoannotate", "wordcloud", "stringapp", "aMatReader")
cytoscape_version <- unlist(strsplit( cytoscapeVersionInfo()['cytoscapeVersion'],split = "\\."))
if(length(cytoscape_version) == 3 && as.numeric(cytoscape_version[1]>=3)
&& as.numeric(cytoscape_version[2]>=7)){
for(i in 1:length(cyto_app_toinstall)){
#check to see if the app is installed.  Only install it if it hasn't been installed
if(!grep(commandsGET(paste("apps status app=\"", cyto_app_toinstall[i],"\"", sep="")),
pattern = "status: Installed")){
installation_response <-commandsGET(paste("apps install app=\"",
cyto_app_toinstall[i],"\"", sep=""))
installation_responses <- c(installation_responses,installation_response)
} else{
installation_responses <- c(installation_responses,"already installed")
}
}
installation_summary <- data.frame(name = cyto_app_toinstall,
status = installation_responses)
knitr::kable(list(installation_summary),
booktabs = TRUE, caption = 'A Summary of automated app installation'
)
}
# Make sure that Cytoscape is open
cytoscapePing()
cytoscapeVersionInfo()
help(package = RCy3)
library(RCy3)
installation_responses <- c()
cyto_app_toinstall <- c("clustermaker2", "enrichmentmap", "autoannotate", "wordcloud", "stringapp", "aMatReader")
cytoscape_version <- unlist(strsplit( cytoscapeVersionInfo()['cytoscapeVersion'],split = "\\."))
if(length(cytoscape_version) == 3 && as.numeric(cytoscape_version[1]>=3)
&& as.numeric(cytoscape_version[2]>=7)){
for(i in 1:length(cyto_app_toinstall)){
#check to see if the app is installed.  Only install it if it hasn't been installed
if(!grep(commandsGET(paste("apps status app=\"", cyto_app_toinstall[i],"\"", sep="")),
pattern = "status: Installed")){
installation_response <-commandsGET(paste("apps install app=\"",
cyto_app_toinstall[i],"\"", sep=""))
installation_responses <- c(installation_responses,installation_response)
} else{
installation_responses <- c(installation_responses,"already installed")
}
}
installation_summary <- data.frame(name = cyto_app_toinstall,
status = installation_responses)
knitr::kable(list(installation_summary),
booktabs = TRUE, caption = 'A Summary of automated app installation'
)
}
# Make sure that Cytoscape is open
cytoscapePing()
cytoscapeVersionInfo()
help(package = RCy3)
cyrestAPI()
commandsAPI()
commandsHelp()
### Cytoscape Basics
nodes <- data.frame(id=c("node 0","node 1", "node 2", "node 3"),
group=c("A","A","B","B"),
score=as.integer(c(20,10,15,5)),
stringsAsFactors = FALSE)
edges <- data.frame(source=c("node 0","node 0","node 0","node 2"),
target=c("node 1","node 2","node 3","node 3"),
interaction=c("inhibits","interactis","activates","interacts"),
weight=c(5.1,3.0,5.2,9.9),
stringsAsFactors = FALSE)
nodes
edges
createNetworkFromDataFrames(nodes,edges, title = "my first network",collection = "DataFrame Example")
# get an image of the resulting network and include it in our current analysis
initial_network_png_file_name <- file.path(getwd(),"230_Isserlin_RCy3_intro", "images","initial_example_network.png")
getwd()
setwd("~/Desktop/bioinformatics-100-days/day13")
# get an image of the resulting network and include it in our current analysis
initial_network_png_file_name <- file.path(getwd(),"230_Isserlin_RCy3_intro", "images","initial_example_network.png")
if(file.exists(initial_network_png_file_name)){
#cytoscape hangs waiting for user response if file already exists.  Remove it first
file.remove(initial_network_png_file_name)
}
exportImage(initial_network_png_file_name, type = "png")
# get an image of the resulting network and include it in our current analysis
initial_network_png_file_name <- file.path(getwd(),"230_Isserlin_RCy3_intro", "images","initial_example_network.png")
exportImage(initial_network_png_file_name, type = "png")
# get an image of the resulting network and include it in our current analysis
initial_network_png_file_name <- file.path(getwd(),"my_first_network.png")
exportImage(initial_network_png_file_name, type = "png")
header = TRUE, sep = "\t", quote = "\", stringAsFactors = FALSE)
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"),
header = TRUE, sep = "\t", quote = "\", stringAsFactors = FALSE)
)
))
0000s
fadajiojoi da
q()
quit
clena
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"),
header = TRUE, sep = "\t", quote = "\", stringAsFactors = FALSE)
# example data set
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"))
# example data set
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"), header = TRUE)
# example data set
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"), header = TRUE, sep = "\t")
quotw = "\")
quote = "\", stringAsFactors = FALSE)
quote = "\", stringAsFactors = FALSE)
# example data set
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"), header = TRUE, sep = "\t",quote = "\", stringAsFactors = FALSE), stringAsFactors = FALSE)
# example data set
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"), header = TRUE, sep = "\t",quote = "\", stringAsFactors = FALSE) F
# example data set
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"), header = TRUE, sep = "\t",quote = "\", stringAsFactors = FALSE)
# example data set
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"), header = TRUE, sep = "\t",quote = "\")
# example data set
RNASeq_expression_matrix <- read.table(file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"), header = TRUE, sep = "\t",quote = "\")
RNASeq_expression_matrix <- read.table(
file.path(getwd(),"TCGA_OV_RNAseq_expression.txt"),
header = TRUE, sep = "\t", quote="\"", stringsAsFactors = FALSE)
RNASeq_gene_scores <- read.table(
file.path(getwd(),"230_Isserlin_RCy3_intro","data","TCGA_OV_RNAseq_All_edgeR_scores.txt"),
header = TRUE, sep = "\t", quote="\"", stringsAsFactors = FALSE)
RNASeq_gene_scores <- read.table(
file.path(getwd(),"TCGA_OV_RNAseq_All_edgeR_scores.txt"),
header = TRUE, sep = "\t", quote="\"", stringsAsFactors = FALSE)
## Use case 1 - how are my top genes related?
top_mensenchymal_genes <- RNASeq_gene_scores[which(RNASeq_gene_scores$FDR.mesen < 0.05 & RNASeq_gene_scores$logFC.mesen > 2),]
head(top_mensenchymal_genes)
# query the String Database to get all interactions found for our set of top Mesenchymal genes
commandsHelp("help string")
# Make sure that Cytoscape is open
cytoscapePing()
cyrestAPI()
commandsAPI()
commandsHelp()
# query the String Database to get all interactions found for our set of top Mesenchymal genes
commandsHelp("help string")
commandsHelp("help string protein query")
commandsHelp("string")
commandsHelp(help string)
commandsHelp(help string)
cyrestAPI()
commandsAPI()
commandsHelp()
# query the String Database to get all interactions found for our set of top Mesenchymal genes
commandsHelp("help string")
commandsHelp("help string protein query")
commandsHelp("help")
# query the String Database to get all interactions found for our set of top Mesenchymal genes
commandsHelp("help string")
commandsHelp("help")
# available functions, commands and arguments
help(package = RCy3)
cyrestAPI()
commandsHelp("help")
commandsHelp('help')
mesen_string_interaction_cmd <- paste('string protein query taxonID=9606 limit=150 cutoff=0.9 query="',paste(top_mesenchymal_genes$Name, collapse=","),'"',sep="")
commandsGET(mesen_string_interaction_cmd)
## Use case 1 - how are my top genes related?
top_mesenchymal_genes <- RNASeq_gene_scores[which(RNASeq_gene_scores$FDR.mesen < 0.05 & RNASeq_gene_scores$logFC.mesen > 2),]
mesen_string_interaction_cmd <- paste('string protein query taxonID=9606 limit=150 cutoff=0.9 query="',paste(top_mesenchymal_genes$Name, collapse=","),'"',sep="")
commandsGET(mesen_string_interaction_cmd)
initial_string_network_png_file_name <- file.path(getwd(), "initial_string_network.png")
response <- exportImage(initial_string_network_png_file_name, type = "png")
layoutNetwork('force-directed')
getLayoutNames()
installation_responses <- c()
cyto_app_toinstall <- c("clustermaker2", "enrichmentmap", "autoannotate", "wordcloud", "stringapp", "aMatReader")
cytoscape_version <- unlist(strsplit( cytoscapeVersionInfo()['cytoscapeVersion'],split = "\\."))
if(length(cytoscape_version) == 3 && as.numeric(cytoscape_version[1]>=3)
&& as.numeric(cytoscape_version[2]>=7)){
for(i in 1:length(cyto_app_toinstall)){
#check to see if the app is installed.  Only install it if it hasn't been installed
if(!grep(commandsGET(paste("apps status app=\"", cyto_app_toinstall[i],"\"", sep="")),
pattern = "status: Installed")){
installation_response <-commandsGET(paste("apps install app=\"",
cyto_app_toinstall[i],"\"", sep=""))
installation_responses <- c(installation_responses,installation_response)
} else{
installation_responses <- c(installation_responses,"already installed")
}
}
installation_summary <- data.frame(name = cyto_app_toinstall,
status = installation_responses)
knitr::kable(list(installation_summary),
booktabs = TRUE, caption = 'A Summary of automated app installation'
)
}
# Make sure that Cytoscape is open
cytoscapePing()
cytoscapeVersionInfo()
# available functions, commands and arguments
help(package = RCy3)
cyrestAPI()
commandsHelp('help')
commandsHelp("help")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
library(RCy3)
commandsHelp("help")
# query the String Database to get all interactions found for our set of top Mesenchymal genes
commandsHelp("help string")
install.packages("devtools")
library(devtools)
install_github('cytoscape/RCy3', build_vignettes=TRUE)
# query the String Database to get all interactions found for our set of top Mesenchymal genes
commandsHelp("help string")
commandsHelp("help network select")
commandsHelp("help string")
# query the String Database to get all interactions found for our set of top Mesenchymal genes
commandsHelp("help string")
commandsHelp("help string protein query")
mesen_string_interaction_cmd <- paste('string protein query taxonID=9606 limit=150 cutoff=0.9 query="',paste(top_mesenchymal_genes$Name, collapse=","),'"',sep="")
commandsGET(mesen_string_interaction_cmd)
initial_string_network_png_file_name <- file.path(getwd(), "initial_string_network.png")
if(file.exists(initial_string_network_png_file_name)){
#cytoscape hangs waiting for user response if file already exists.  Remove it first
response <- file.remove(initial_string_network_png_file_name)
}
response <- exportImage(initial_string_network_png_file_name, type = "png")
layoutNetwork('force-directed')
getLayoutNames()
getLayoutPropertyNames(layout.name='force-directed')
layoutNetwork('force-directed defaultSpringCoefficient=0.0000008 defaultSpringLength=70')
if(file.exists(relayout_string_network_png_file_name)){
#cytoscape hangs waiting for user response if file already exists.  Remove it first
response<- file.remove(relayout_string_network_png_file_name)
}
relayout_string_network_png_file_name <- file.path(getwd(),"230_Isserlin_RCy3_intro", "images","relayout_string_network.png")
if(file.exists(relayout_string_network_png_file_name)){
#cytoscape hangs waiting for user response if file already exists.  Remove it first
response<- file.remove(relayout_string_network_png_file_name)
}
response <- exportImage(relayout_string_network_png_file_name, type = "png")
node_attribute_table_topmesen <- getTableColumns(table="node")
head(node_attribute_table_topmesen[,3:7])
## Use case 1 - how are my top genes related?
top_mesenchymal_genes <- RNASeq_gene_scores[which(RNASeq_gene_scores$FDR.mesen < 0.05 & RNASeq_gene_scores$logFC.mesen > 2),]
head(top_mensenchymal_genes)
# query the String Database to get all interactions found for our set of top Mesenchymal genes
commandsHelp("help string")
library(RCy3)
# Make sure that Cytoscape is open
cytoscapePing()
installation_responses <- c()
cyto_app_toinstall <- c("clustermaker2", "enrichmentmap", "autoannotate", "wordcloud", "stringapp", "aMatReader")
cytoscape_version <- unlist(strsplit( cytoscapeVersionInfo()['cytoscapeVersion'],split = "\\."))
library(RCy3)
installation_responses <- c()
cyto_app_toinstall <- c("clustermaker2", "enrichmentmap", "autoannotate", "wordcloud", "stringapp", "aMatReader")
cytoscape_version <- unlist(strsplit( cytoscapeVersionInfo()['cytoscapeVersion'],split = "\\."))
